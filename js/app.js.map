{"version":3,"sources":["helpers/templates-helpers.js","firebase.config.js","components/editor.js","components/FormField.js","components/post.js","routes/add.js","routes/errorPage.js","routes/home.js","routes/login.js","routes/logout.js","routes/profile.js","routes/profileEdit.js","routes/signup.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function() {\n\n  const icons = {\n    twitter     : 'fa fa-twitter',\n    facebook    : 'fa fa-facebook',\n    vkontakte   : 'fa fa-vk',\n    website     : 'fa fa-globe',\n    publicEmail : 'fa fa-envelope-o',\n    phoneNumber : 'fa fa-phone'\n  };\n\n  const socialLinkTemplates = {\n    twitter     : (param) => `https://twitter.com/${param}`,\n    facebook    : (param) => `https://www.facebook.com/${param}`,\n    vkontakte   : (param) => `https://vk.com/${param}`,\n    website     : (param) => param,\n  };\n\n  Handlebars.registerHelper('socialIconFor', (name) => {\n    return icons[name] || '';\n  });\n\n  Handlebars.registerHelper('socialLinkFor', (name, value) => {\n    const tpl = socialLinkTemplates[name];\n    if (!tpl) return name;\n    return tpl(value);\n  });\n\n  Handlebars.registerHelper('decamelize', (str) => {\n    return str\n      .split(/(?=[A-Z])/)\n      .map(word => word[0].toUpperCase() + word.slice(1))\n      .join(' ');\n  });\n\n  Handlebars.registerHelper('formatDate', (dateString) => {\n    return moment(dateString).fromNow(true);\n  });\n\n  Handlebars.registerHelper('sortBy', ()=>{});\n\n  Handlebars.registerHelper('ifCond', (v1, operator, v2, options) => {\n    switch (operator) {\n      case '==':\n        // eslint-disable-next-line eqeqeq\n        return (v1 == v2) ? options.fn(this) : options.inverse(this);\n      case '===':\n        return (v1 === v2) ? options.fn(this) : options.inverse(this);\n      case '!=':\n        // eslint-disable-next-line eqeqeq\n        return (v1 != v2) ? options.fn(this) : options.inverse(this);\n      case '!==':\n        return (v1 !== v2) ? options.fn(this) : options.inverse(this);\n      case '<':\n        return (v1 < v2) ? options.fn(this) : options.inverse(this);\n      case '<=':\n        return (v1 <= v2) ? options.fn(this) : options.inverse(this);\n      case '>':\n        return (v1 > v2) ? options.fn(this) : options.inverse(this);\n      case '>=':\n        return (v1 >= v2) ? options.fn(this) : options.inverse(this);\n      case '&&':\n        return (v1 && v2) ? options.fn(this) : options.inverse(this);\n      case '||':\n        return (v1 || v2) ? options.fn(this) : options.inverse(this);\n      default:\n        return options.inverse(this);\n    }\n  });\n\n} ());\n","var firebaseConfig = {\n  \tapiKey: \"AIzaSyBcmmr1eJujHuDfhTnFL6kemlPU8v3ws9A\",\n    authDomain: \"insta-1af26.firebaseapp.com\",\n    databaseURL: \"https://insta-1af26.firebaseio.com\",\n    projectId: \"insta-1af26\",\n    storageBucket: \"insta-1af26.appspot.com\",\n    messagingSenderId: \"671021297319\"\n};\n","const generateID = (prefix = '', len = 6) =>\n  prefix + Math.random().toString(36).slice(2, len + 2);\n\nclass Editor {\n  constructor(el, props) {\n    this.root             = el;\n    this.props            = Object.assign({}, Editor.defaults, props);\n    this.canvasContainer  = document.querySelector(this.props.canvasContainer, this.root);\n    this.filtersContainer = document.querySelector(this.props.filtersContainer, this.root);\n    this.fileInput        = document.querySelector(this.props.fileInput, this.root);\n    this.triggerReset     = document.querySelector(this.props.triggerReset, this.root);\n    this.triggerUpload    = document.querySelector(this.props.triggerUpload, this.root);\n    this.progressBar      = document.querySelector(this.props.progressBar, this.root);\n    this.caption          = document.querySelector(this.props.caption, this.root);\n    this.file             = null;\n    this.filter           = null;\n    this._processing      = false;\n\n    this.resetFilter       = this.resetFilter.bind(this);\n    this.save              = this.save.bind(this);\n    this._onFileChange     = this._onFileChange.bind(this);\n    this._onFilterClick    = this._onFilterClick.bind(this);\n    this._onUploadProgress = this._onUploadProgress.bind(this);\n\n    this.triggerReset.style.display = 'none';\n\n    this._bindEvents();\n    console.log(this);\n  }\n\n  applyFilter(filter) {\n    if (!(filter in this.caman)) {\n      console.log(`There is no filter with name \"${filter}\"`);\n      return;\n    }\n\n    if (this.filter === filter || this._processing) {\n      return;\n    }\n\n    this._processing = true;\n    this._toggleBusyState();\n    this.caman.revert();\n    this.caman[filter]();\n    this.caman.render(() => {\n      this._processing = false;\n      this._toggleBusyState();\n      this.filter = filter;\n      this._highlightActiveFilter();\n    });\n  }\n\n  resetFilter() {\n    if (!this.filter) return;\n    this.filter = null;\n    this.caman && this.caman.revert();\n    this._highlightActiveFilter();\n    this.triggerReset.style.display = 'none';\n  }\n\n  // get caption and add it to the post as first comment\n  _getComments() {\n    const caption = this.caption.value.trim();\n\n    if (!caption) return {};\n\n    const { uid, username } = this.props.currentUser;\n    const commentId = generateID('comment-');\n    console.log(this.props.currentUser);\n\n    return {\n      [commentId]: {\n        id: commentId,\n        value: caption,\n        author: username,\n        authorId: uid,\n        created: (new Date()).toISOString()\n      }\n    };\n  }\n\n  save() {\n    const id          = generateID('post-');\n    const user        = firebase.auth().currentUser;\n    const dbPath      = `/posts/${id}`;\n    const storagePath = `/pictures/${user.uid}/${id}.jpg`;\n    const storageRef  = firebase.storage().ref(storagePath);\n    const dbRef       = firebase.database().ref(dbPath);\n\n    // show spinner and progress bar\n    this._toggleBusyState();\n    this._toggleUploadingState();\n\n    // upload image to firebase as base64 encoded string\n    const uploadTask = storageRef.putString(\n      this.caman.toBase64('.jpg'),\n      'data_url'\n    );\n\n    \n\n    // show progress while uploading\n    uploadTask.on('state_changed', this._onUploadProgress);\n\n    uploadTask\n      // create entry in firebase database after successfull upload\n      .then(snapshot => {\n        const { timeCreated, downloadURLs, fullPath } = snapshot.metadata;\n        return dbRef.set({\n          id,\n          author: user.uid,\n          created: timeCreated,\n          url: downloadURLs[0],\n          filterName: this.filter,\n          storagePath: fullPath,\n          dimensions: {\n            width: this.caman.width,\n            height: this.caman.height\n          },\n          comments: this._getComments()\n        });\n      })\n      // hide spinner and progress bar\n      .then(() => {\n        this._toggleBusyState();\n        this._toggleUploadingState();\n        this.props.onSave();\n      })\n      // handle error while uploading or entry creation\n      .catch(error => {\n        console.log(error);\n        this.props.onError(error);\n      });\n  }\n\n  _bindEvents() {\n    this.triggerReset.addEventListener('click', this.resetFilter);\n    this.triggerUpload.addEventListener('click', this.save);\n    this.fileInput.addEventListener('change', this._onFileChange);\n\n    this.filtersContainer.addEventListener('click', (event) => {\n      if (event.target.matches('[data-filter]')) {\n        this._onFilterClick(event);\n      }\n    });\n  }\n\n  _onFileChange(e) {\n    this.file = this.fileInput.files[0];\n    this._initEditor();\n  }\n\n  _onFilterClick(e) {\n    const target     = e.target;\n    const { filter } = target.dataset;\n    if (!filter) return;\n    this.applyFilter(filter);\n  }\n\n  _onUploadProgress(snapshot) {\n    const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n    this.progressBar.style.width = progress + '%';\n  }\n\n  _highlightActiveFilter() {\n    const { activeClass } = this.props;\n    const prevActive = document.querySelector('.is-active', this.filtersContainer);\n    const nextActive = this.filter\n      ? document.querySelector(`[data-filter=\"${this.filter}\"]`, this.filtersContainer)\n      : null;\n    prevActive && prevActive.classList.remove(activeClass);\n    nextActive && nextActive.classList.add(activeClass);\n    this.triggerReset.style.display = '';\n  }\n\n  _toggleBusyState() {\n    const { busyClass } = this.props;\n    const isBusy   = this.root.classList.contains(busyClass);\n    const triggers = [this.triggerReset, this.triggerUpload];\n    const method   = isBusy ? 'removeAttribute' : 'setAttribute';\n\n    this.root.classList.toggle(busyClass);\n    triggers.forEach(el => el[method]('disabled', true));\n  }\n\n  _toggleUploadingState() {\n    this.root.classList.toggle(this.props.uploadingClass);\n  }\n\n  _initEditor() {\n    const { busyClass, hasImageClass, imageMaxSize } = this.props;\n    const url    = URL.createObjectURL(this.file);\n    const canvas = document.createElement('canvas');\n\n    if (this.canvas) {\n      this.canvas.parentNode.replaceChild(canvas, this.canvas);\n    } else {\n      this.canvasContainer.appendChild(canvas);\n    }\n\n    this.canvas = canvas;\n    this._toggleBusyState();\n    this.caman = Caman(this.canvas, url, (caman) => {\n      const { originalWidth, originalHeight } = caman;\n      const ratio  = originalWidth / originalHeight;\n      const width  = originalWidth > imageMaxSize ? imageMaxSize : originalWidth;\n      const height = Math.round(width / ratio);\n\n      caman.resize({ width, height }).render();\n\n      this._toggleBusyState();\n      this.root.classList.add(hasImageClass);\n    });\n  }\n}\n\nEditor.defaults = {\n  currentUser: {},\n  activeClass: 'is-active',\n  busyClass: 'is-busy',\n  hasImageClass: 'has-image',\n  uploadingClass: 'is-uploading',\n  filtersContainer: '.editor__presets',\n  canvasContainer: '.editor__canvas-container',\n  triggerReset: '.editor__reset',\n  triggerUpload: '.editor__upload',\n  fileInput: 'input[type=\"file\"]',\n  progressBar: '.editor__progress .progress-bar',\n  caption: '.editor__caption textarea',\n  imageMaxSize: 1200,\n  onSave: () => {},\n  onError: () => {}\n};\n\nEditor.FILTERS = [\n  'vintage',\n  'lomo',\n  'clarity',\n  'sinCity',\n  'sunrise',\n  'crossProcess',\n  'orangePeel',\n  'love',\n  'grungy',\n  'jarques',\n  'pinhole',\n  'oldBoot',\n  'glowingSun',\n  'hazyDays',\n  'herMajesty',\n  'nostalgia',\n  'hemingway',\n  'concentrate'\n];\n","const errorTexts = {\n  required: 'Field should be required',\n  hasAtSymbol: 'Field should has @',\n  password: 'Password should be at least six symbols',\n  username: 'Username should contains only letters',\n  displayName: 'Name should contains only letters',\n  phoneNumber: 'Invalid phone number',\n  empty: '',\n  \n  \n};\n\nconst validators = {\n  required: value => value.length !== 0,\n  hasAtSymbol: value => value.indexOf('@') !== -1,\n  password: value => value.length > 6,\n  username: value =>  /\\w+/.test(value),\n  displayName: value =>  /\\w+/.test(value),\n  phoneNumber: value => /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/.test(value),\n  empty: value => value\n \n};\n\n\n\nclass FormField {\n  constructor(element, options) {\n    this.element = element;\n    this.options = Object.assign({}, FormField.defaultOptions, options);\n    this.errorText = [];\n  }\n\n  isValid() {\n     for(var key in this.options.validations) {\n      let validKey = this.options.validations[key];\n\n     if(validators[validKey](this.element.value) === false) {\n        this.errorText.push(errorTexts[validKey]);\n        return false;\n      }\n    }\n\n    return true;\n   \n  }\n\n  resetState() {\n    this.element.parentNode.classList.remove(this.options.errorClass);\n    this.element.parentNode.classList.remove(this.options.successClass);\n    this.element.nextElementSibling.innerText = '';\n  }\n\n  setErrorState(message) {\n    this.element.parentNode.classList.add(this.options.errorClass);\n    this.element.nextElementSibling.innerText = this.errorText;\n  }\n\n  setSuccessState() {\n    this.element.parentNode.classList.add(this.options.successClass);\n  }\n\n  validate() {\n     this.resetState();\n        if(this.isValid() === true) {\n             this.setSuccessState();\n    } else {\n          this.setErrorState();\n    }\n  }\n}\n\nFormField.defaultOptions = {\n  validations: [],\n  errorClass: 'has-error',\n  successClass: 'has-success'\n};\n\n\n","class Post {\n  /**\n   * @param  {string|Object} post - Post id as string or already retrieved data of post\n   * @return {void}\n   */\n  constructor(post, props = {}) {\n    this.props       = Object.assign({}, Post.defaults, props);\n    this.tpl         = Handlebars.partials.post;\n    this.currentUser = this.props.currentUser;\n    this.liked       = false; // is post liked by currentUser?\n\n    this._onDataRetrieved = this._onDataRetrieved.bind(this);\n\n    this._setupDomElement();\n    this._setupDbRef(post);\n  }\n\n  render() {\n    console.time('render');\n    this.element.innerHTML = this.tpl(\n      Object.assign({}, this.data, {\n        author: this.author,\n        currentUser: this.currentUser,\n        liked: this.liked,\n        likesCount: Object.keys((this.data && this.data.likes) || {}).length,\n        isOwner: this.data.author === this.currentUser.uid\n      })\n    );\n    console.log(this);\n    console.timeEnd('render');\n  }\n\n  getElement() {\n    return this.element;\n  }\n\n  _setupDomElement() {\n    this.element = document.createElement('article');\n    this.element.classList = 'post';\n  }\n\n  _fetchAutor() {\n    firebase\n      .database()\n      .ref(`users/${this.data.author}`)\n      .once('value', snapshot => {\n        this.author = snapshot.val();\n        this.render();\n      });\n  }\n\n  _onDataRetrieved(snapshot) {\n    this.data = snapshot.val();\n    this.author || this._fetchAutor();\n    this.element.setAttribute('data-post', this.data.id);\n    this.liked = !!(this.data.likes && this.data.likes[this.currentUser.uid]);\n    this.render();\n    console.log('data retrived', this.data);\n  }\n\n  _onDataChanged(snapshot) {\n    const key = snapshot.key;\n    const value = snapshot.val();\n    this.data[key] = value;\n    this.render();\n    console.log('data changed', key, value);\n  }\n\n  _setupDbRef(post) {\n    const id = typeof post === 'string' ? post : post.id;\n    this.dbRef = firebase.database().ref(`posts/${id}`);\n    this.dbRef.on('value', this._onDataRetrieved);\n  }\n}\n\nPost.defaults = {\n  currentUser: {}\n};\n","function add(ctx, next) {\n  rootEl.innerHTML = templates.add({\n    user: ctx.user,\n    profile: ctx.user,\n    filters: Editor.FILTERS\n  });\n\n  const editor = document.getElementById('editor');\n  new Editor(editor, {\n    currentUser: ctx.user,\n    onSave: () => {\n      page.redirect('/');\n    }\n  });\n}\n","function errorPage() {\n  rootEl.innerHTML = templates['404']();\n}\n","function home(ctx) {\n // console.log(ctx);\n  rootEl.innerHTML = templates.main({\n    user: ctx.user,\n    profile: ctx.user\n  });\n\n  if (!ctx.user) {\n    return;\n  }\n\n  const feed  = document.getElementById('feed');\n  const dbRef = firebase.database().ref();\n\n  dbRef\n    .child('posts')\n    .limitToLast(10)\n    .once('value', snapshot => {\n      const entries = snapshot.val();\n      if (!entries) return;\n      Object.keys(entries).forEach((key) => {\n        let entry = entries[key];\n        const post = new Post(entry, { currentUser: ctx.user });\n        feed.insertBefore(post.getElement(), feed.firstElementChild);\n      })\n    });\n\n}\n","function login() {\n    rootEl.innerHTML = templates.login();\n\n    var form = document.getElementById('login-form');\n    var { email, password } = form;\n\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        firebase.auth().signInWithEmailAndPassword(email.value, password.value)\n            .then((value) => {\n                firebase.database().ref(`users/${value.uid}`).once('value')\n                    .then(() => {\n                        page('/');\n                    });\n            }).catch((error) => {\n                var errorMessage = error.message;\n                var pass = /password/\n\n                if(errorMessage.match(pass)){\n                password.parentNode.classList.add('has-error');\n                email.parentNode.classList.remove('has-error');\n                email.nextElementSibling.innerText = '';\n                password.nextElementSibling.innerText = errorMessage;}\n\n                else {\n                \tpassword.parentNode.classList.remove('has-error');\n      \t\t\t\temail.parentNode.classList.add('has-error');\n                \tpassword.nextElementSibling.innerText = '';\n                \temail.nextElementSibling.innerText = errorMessage;\n\n                }\n            });\n\t   })\n\n};","function logout(){\r\n\tfirebase.auth().signOut()\r\n\t\t.then(()=>{\r\n\t\t\tpage('/');\r\n\t\t})\r\n}","function profile(ctx) {\r\n    rootEl.innerHTML = templates['profile']({\r\n  \tuser: ctx.user,\r\n  \tprofile: ctx.user\r\n  })\r\n\r\n    let formEdit = document.getElementById('public-info');\r\n    let pictureForm = document.getElementById('edit-profile');\r\n    let profilePicture = document.querySelector('.profile__pic');\r\n\r\n   // let { phoneNumber, about } = formEdit\r\n\r\n\r\n\r\n\r\n    let user = firebase.auth().currentUser;\r\n    let storageRef = firebase.storage().ref(`/avatar/${user.uid}/`);\r\n\r\n    storageRef.getDownloadURL()\r\n    \t.then((url) =>{\r\n    \t\tprofilePicture.style.backgroundImage = `url(${url})`\r\n    \t})\r\n\r\n\r\n    pictureForm.addEventListener('click', (e)=>{\r\n    \te.preventDefault()\r\n    })\r\n\r\n\r\n}","function profileEdit(ctx) {\n    rootEl.innerHTML = templates['profile-edit']({\n        user: ctx.user,\n        profile: ctx.user\n    });\n\n    let profileBody = document.getElementById('profile__body')\n    let profilePicture = document.getElementById('profile-picture')\n\n    new FormEditor(profile__body)\n    new PictureEditor(profilePicture)\n\n}\n\n/*------------------------------------------------------------------------------*/\n\nclass FormEditor {\n    constructor(el, props) {\n        this.el = el;\n        this.props = Object.assign({}, FormEditor.default, props);\n\n        this.formEdit = document.getElementById(this.props.formEdit, this.el);\n        this.form_delete = document.getElementById(this.props.form_delete, this.el);\n        this.form_password = document.getElementById(this.props.form_password, this.el);\n\n        this.passwordControl = this.form_password.passwordControl;\n        this.newPassword = this.form_password.NewPassword;\n        this.nameConfirm = this.form_delete.usernameConfirm;\n\n        this.user = firebase.auth().currentUser;\n        this.dbRef = firebase.database().ref(`users/${this.user.uid}`);\n\n        this.readDb();\n        this.events();\n\n    }\n\n    events() {\n        this.formEdit.addEventListener('submit', (e) => {\n            this.editPublicInfo(e)\n        })\n\n        this.form_delete.addEventListener('submit', (e) => {\n            this.deleteProfile(e)\n        })\n\n        this.form_password.addEventListener('submit', (e) => {\n            this.changePassword(e)\n        })\n\n    }\n\n    editPublicInfo(e) {\n        e.preventDefault()\n\n        let data = {}\n\n        for (let i = 0; i < this.formEdit.length; i++) {\n            if (this.formEdit[i].value.length != 0) {\n                let dataValidate = new FormField(this.formEdit[i], {\n                    validations: [this.formEdit[i].getAttribute('data-validators')]\n                });\n\n                dataValidate.validate()\n\n                if (dataValidate.isValid() === true) {\n                    data[this.formEdit[i].name] = this.formEdit[i].value;\n                }\n            }\n        }\n\n        this.dbRef.update(data);\n    }\n\n    readDb() {\n        this.dbRef.once('value')\n            .then((snapshot) => {\n                this.info = {\n                    username: snapshot.val().username,\n                    email: snapshot.val().email\n                }\n            })\n    }\n\n    changePassword(e) {\n        e.preventDefault()\n\n        firebase.auth().signInWithEmailAndPassword(this.info.email, this.passwordControl.value)\n            .then(() => {\n              this.newPassword.parentNode.classList.add('change_pasword')\n              this.passwordControl.parentNode.classList.add('change_pasword--hidden')\n\n              this.user.updatePassword(this.newPassword.value)\n                  .then(() => {\n                      page('/logout')\n                  }).catch((error) => {\n                      let errorMessage = error.message;\n                      this.newPassword.parentNode.classList.add('has-error')\n                      this.newPassword.nextElementSibling.innerText = errorMessage\n                  })\n\n          }).catch((error) => {\n              this.passwordControl.parentNode.classList.add('has-error')\n              this.passwordControl.nextElementSibling.innerText = 'Wrong password';\n          })\n\n\n    }\n\n    deleteProfile(e) {\n        e.preventDefault()\n        if (this.nameConfirm.value == this.info.username) {\n            this.user.delete()\n                .then(() => {\n                    page('/');\n                })\n        } else {\n            this.nameConfirm.parentNode.classList.add('has-error');\n            this.nameConfirm.nextElementSibling.innerText = 'wrong username';\n        }\n    }\n\n}\n\nFormEditor.default = {\n    formEdit: 'public-info',\n    form_delete: 'delete-profile',\n    form_password: 'changePassword',\n\n\n}\n\n/*-----------------------------------------------------------------------------*/\n\nclass PictureEditor {\n    constructor(el, props) {\n        this.el = el;\n        this.props = Object.assign({}, PictureEditor.defaults, props);\n\n        this.fileInput = document.querySelector(this.props.fileInput, this.el);\n        this.pic = document.querySelector(this.props.pic, this.el);\n        this.actions = document.querySelector(this.props.actions, this.el);\n        this.progress = document.querySelector(this.props.progress, this.el);\n        this.progressBar = document.querySelector(this.props.progressBar, this.el);\n\n        this.file = null;\n\n        this.user = firebase.auth().currentUser;\n        this.storageRef = firebase.storage().ref(`/avatar/${this.user.uid}/`);\n\n        this.getPicture()\n        this.events()\n    }\n\n    getPicture() {\n        this.storageRef.getDownloadURL()\n            .then((url) => {\n                this.createBackgroundImage(url)\n            })\n    }\n\n    createBackgroundImage(url) {\n        this.pic.style.backgroundImage = `url(${url})`;\n    }\n\n    events() {\n        this.actions.addEventListener('click', (e) => {\n            this.actionsTarget(e)\n        });\n\n        this.fileInput.addEventListener('change', (e) => {\n            this.createFile();\n        });\n\n    }\n\n    createFile() {\n        this.file = this.fileInput.files[0];\n        let url = URL.createObjectURL(this.file);\n        this.createBackgroundImage(url);\n        this.actions.style.display = 'flex';\n    }\n\n    actionsTarget(e) {\n        e.preventDefault()\n        let target = e.target.getAttribute('data-action')\n\n        if (target == 'save') {\n            this.save()\n\n        } else if (target == 'cancel') {\n            this.cancel()\n\n        }\n    }\n\n    save() {\n        this.actions.style.display = 'none';\n        this.progress.style.display = 'block';\n\n        const uploadPicture = this.storageRef.put(this.file)\n        uploadPicture.on('state_changed', (snapshot) => {\n            const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n            this.progressBar.style.width = progress + '%';\n        });\n\n        uploadPicture\n            .then(() => {\n                this.getPicture();\n                this.progress.style.display = 'none';\n            })\n    };\n\n    cancel() {\n        this.getPicture()\n        this.actions.style.display = 'none';\n    };\n\n}\n\nPictureEditor.defaults = {\n    fileInput: 'input[type=\"file\"]',\n    pic: '.profile-picture__picture',\n    actions: '.profile-picture__actions',\n    progress: '.progress',\n    progressBar: '.progress-bar',\n\n};","function signup() {\n  rootEl.innerHTML = templates.signup();\n\n  var form = document.getElementById('signup-form');\n  var { email, username, displayName, password, passwordConfirm } = form;\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    \n    let emailValidate = new FormField(email, {\n      validations: ['required', 'hasAtSymbol']\n    });\n\n    let passwordValidate = new FormField(password, {\n      validations: ['password']\n    });\n\n    let usernameValidate = new FormField(username, {\n      validations: ['username']\n    });\n\n    let displayNameValidate = new FormField(displayName, {\n      validations: ['displayName']\n    });\n\n   var arr = [emailValidate, passwordValidate, usernameValidate, displayNameValidate]\n\n   for(key in arr) {\n      arr[key].validate()\n   }   \n    \n   function arrEvery(i, item, arr) {\n     return arr[item].isValid()\n    }\n\n   \n    if (arr.every(arrEvery)){\n    firebase.auth().createUserWithEmailAndPassword(email.value, password.value)\n      .then((value) => {\n        firebase.database().ref(`users/${value.uid}`).set({\n          uid: value.uid,\n          email: email.value,\n          username: username.value,\n          displayName: displayName.value,\n          createdAt: (new Date()).toISOString()\n        })\n          .then(() => {\n            page('/');\n          });\n      });\n\n    }\n\n  });\n\n}\n\n\n//\n\n","//=require 'helpers/*.js'\n//=require 'firebase.config.js'\n//=require 'components/*.js'\n//=require 'routes/*.js'\n\nvar rootEl = document.getElementById('root');\n\nfirebase.initializeApp(firebaseConfig);\nvar storage = firebase.storage()\n\npage('*', authMiddleware);\npage('/', home);\npage('/signup', signup);\npage('/login', login);\npage('/profile/edit', profileEdit);\npage('/profile', profile);\npage('/logout', logout)\npage('/add', add);\npage('*', errorPage);\n\nfunction authMiddleware(ctx, next) {\n  var user = firebase.auth().currentUser;\n\n  if (user) {\n    firebase.database().ref(`users/${user.uid}`)\n      .once('value')\n      .then((userInfo) => {\n        ctx.user = ctx.profile = userInfo.val();\n        next();\n      });\n  } else {\n    ctx.user =ctx.profile = null;\n    next();\n  }\n}\n\nconst unsubsribe = firebase.auth().onAuthStateChanged(() => {\n  page();\n  unsubsribe();\n});\n\n\n\n\n\n\n\n\n\n\n"]}